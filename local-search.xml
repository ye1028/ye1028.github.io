<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis持久化及主从架构</title>
    <link href="/2022/07/05/%E7%BC%93%E5%AD%98/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E5%8F%8A%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/07/05/%E7%BC%93%E5%AD%98/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E5%8F%8A%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>Redis一般用作于应用程和数据库之间的中间层,用于储存热点数据,减轻数据库的压力,但是我们可能会遇到服务器宕机的情况,在这情况下,数据如果没备份的话,大量请求会穿过redis进入mysql中，会导致数据库压力急剧变大甚至宕机。Redis给我们提供以下几个持久化方法：</p><ul><li><p>RDB：当在规定时间内修改的次数超过配置文件中的次数会将会形成内存快照进行备份</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">save</span> <span class="hljs-number">900</span> <span class="hljs-number">1</span>   #在<span class="hljs-number">900</span>秒(<span class="hljs-number">15</span>分钟)之后，如果至少有<span class="hljs-number">1</span>个key发生变化，则dump内存快照。<br><span class="hljs-attribute">save</span> <span class="hljs-number">300</span> <span class="hljs-number">10</span>  #在<span class="hljs-number">300</span>秒(<span class="hljs-number">5</span>分钟)之后，如果至少有<span class="hljs-number">10</span>个key发生变化，则dump内存快照。<br><span class="hljs-attribute">save</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><ul><li><p>优点：相较于AOF恢复数据时效率较高,它文件中保存的是数据，AOF保存的是修改指令</p></li><li><p>缺点：数据不安全,数据丢失的较多</p></li></ul></li><li><p>AOF：每进行一次修改命令时,会将命令写入文件中，在文件大小时重写前的一倍时会触发重写。有几种策略可以使用：</p><ol><li><p>appendfsync always每有一个修改命令,就会记录文件中</p></li><li><p>appendfsync everysec：每隔一秒记录</p></li><li><p>appendfsync no ：由系统规定写入磁盘的时间</p><ul><li><p>优点：数据相较于RDB保存完整</p></li><li><p>缺点：效率执行缓慢</p></li></ul></li></ol></li><li><p>RDB+AOF混合：混合模式和AOF大致相同,改变的是重写(bgsave)时会把命令二进制化。</p></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Redis主从架构"><a href="#Redis主从架构" class="headerlink" title="Redis主从架构"></a>Redis主从架构</h2><p>Redis在运行的过程中可能会因为各种原因宕机.一旦宕机那么会导致数据库压力急剧变大甚至宕机。为了防止这种情况保证它的高可用性。我们可以尝试使用Redis的主从架构。主从不仅可以防止这种情况,它还可以分担主库的大部分压力。主从负责写,从库负责读</p><blockquote><p>如何添加主从</p></blockquote><p>我们只需要在文件中添加以下代码即可：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">replicaof <span class="hljs-number">192.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">6379</span>  //设置主节点<br><span class="hljs-keyword">replica</span>-<span class="hljs-keyword">read</span>-<span class="hljs-keyword">only</span> yes     //只用于只读<br></code></pre></td></tr></table></figure><blockquote><p>主库和从库如何保证数据的一致性</p></blockquote><ol><li><p>slave从库第一次连接master主库时,会发送psync命令,在发送命令之前首先会进行socket长连接</p></li><li><p>master主库接收到命令会执行bgsave将内存中数据形成快照</p></li><li><p>将数据发送到slave从库中</p></li><li><p>slave从库会清空数据并加载RDB数据</p></li><li><p>在形成快照这过程中,其中会有新的请求进来生成新的数据（Redis生成快照时会fork出一个子线程）.Redis会将这些指令保存到缓存区中。等RDB发送完成后，紧接着发缓存区数据</p></li><li><p>slave从库会执行缓存区中的命令</p></li><li><p>在后续的过程中,主从一致性都是通过缓存区的形式传输</p></li></ol><p>如图所示：</p><img src="/imgs/slave.png"><blockquote><p>主从复制风暴</p></blockquote><p>一个主库同时有多个从库连接可能会造成主库压力过大,这时候我们可以选择把这些分散,</p><p>一个主库连接两个从库,其中从库也作为下面的主库,形成一个树状结构</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>混合设计模式在项目中的运用</title>
    <link href="/2022/07/05/%E9%9A%8F%E7%AC%94/%E6%B7%B7%E5%90%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/05/%E9%9A%8F%E7%AC%94/%E6%B7%B7%E5%90%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="策略-模板-工厂简化项目中的if-else"><a href="#策略-模板-工厂简化项目中的if-else" class="headerlink" title="策略+模板+工厂简化项目中的if-else"></a>策略+模板+工厂简化项目中的if-else</h2><p>最近在做开发的时候,遇到了一个需求：管理员在不同视图下观看到不同的数据</p><p>如果按照以往的开发下使用if-else,不仅在代码上看着臃肿而且还在后续的开发中也难以维护。如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(name.equals(<span class="hljs-string">&quot;a&quot;</span>)</span></span>)<br>&#123;<br>    <span class="hljs-comment">//逻辑代码</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">if</span>(name<span class="hljs-selector-class">.equals</span>(<span class="hljs-string">&quot;b&quot;</span>))&#123;<br>    <span class="hljs-comment">//逻辑代码</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">if</span>(name<span class="hljs-selector-class">.equals</span>(<span class="hljs-string">&quot;c&quot;</span>)&#123;&#125;<br>.......<br></code></pre></td></tr></table></figure><ol><li><p>首先我们可以把逻辑代码抽象成一个抽象类</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Handle</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">InitializingBean</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> AAA();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>然后不同逻辑代码实现这个共同的父接口</p></li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ZhangSanHandle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AAA</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;张三&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//子类实现InitializingBean接口的afterPropertiesSet会在初始化Bean的时候执行</span><br>       Factory.register(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>创建一个工厂类负责生产这些类</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;<span class="hljs-built_in">String</span>,Handle&gt; <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Handle <span class="hljs-title function_">getInvokeStrategy</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>.<span class="hljs-property">get</span>(<span class="hljs-built_in">str</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span>,Handle handle)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.<span class="hljs-property">isEmpty</span>(<span class="hljs-built_in">str</span>) || <span class="hljs-literal">null</span> == handle)&#123;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-built_in">map</span>.<span class="hljs-property">put</span>(<span class="hljs-built_in">str</span>,handle);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由此最原始的代码可以优化为：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Handle a <span class="hljs-operator">=</span> Factory.getInvokeStrategy(<span class="hljs-string">&quot;a&quot;</span>)<span class="hljs-comment">;</span><br>a.AAA()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>如果逻辑代码的业务逻辑大体不同的话,如一个有返回值，一个没有返回值,那么我们只需要把handle改成模板方法即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">method1</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">method2</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类继承这个模板类实现自己相应的接口即可</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql隔离级别与锁机制</title>
    <link href="/2022/07/04/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/07/04/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="事务及其ACID属性"><a href="#事务及其ACID属性" class="headerlink" title="事务及其ACID属性"></a>事务及其ACID属性</h3><p>事务是一组SQL语句组成的逻辑单元,事务由以下四个特性。通常被称为ACID</p><ol><li><p>原子性：语句要么全部执行成功，只要一个失败就会返回</p></li><li><p>一致性：事务完成前后，数据保持一致</p></li><li><p>隔离性：一个事务不影响另外一个事务</p></li><li><p>持久性：事务完成之后，对数据的修改是永久的</p></li></ol><h3 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h3><ul><li><p>脏读：一个事务读取到了另外一个事务还没提交的数据(可能回滚)</p></li><li><p>不可重复读：一个事务中在不同时间段中相同的sql语句获取到了不同的数据</p></li><li><p>幻读：一个事务中在不同时间段中相同的sql语句获取到了个数不同的数据</p></li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ul><li><p>乐观锁：根据版本号,如果版本号不匹配重新执行</p></li><li><p>悲观锁：在自己执行的过程中其他事务都不能操作这个数据</p><ul><li><p>表锁：操作时直接锁住整张表,其他不可访问</p></li><li><p>行锁：操作时锁住操作的数据</p></li><li><p>读锁：其他事务可以读,不可以写</p></li><li><p>写锁：不可读写</p></li></ul></li></ul><h3 id="解决并发事务问题"><a href="#解决并发事务问题" class="headerlink" title="解决并发事务问题"></a>解决并发事务问题</h3><ul><li><p>读未提交</p></li><li><p>读已提交(解决脏读)</p></li><li><p>可重复读(解决脏读、不可重复读)</p></li><li><p>串行化(解决脏读、不可重复读、幻读)</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解Mysql索引</title>
    <link href="/2022/07/04/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Mysql%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/07/04/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Mysql%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h1 id="深入理解Mysql索引"><a href="#深入理解Mysql索引" class="headerlink" title="深入理解Mysql索引"></a>深入理解Mysql索引</h1><blockquote><p>索引简介</p></blockquote><p>索引是帮助Mysql高效获取数据的<mark>排好序</mark>的<mark>数据结构</mark></p><p>索引数据结构</p><ul><li><p>hash：不能进行范围查询</p></li><li><p>红黑树</p></li></ul><p>众所周知数据都是存储在磁盘上的。在我们查询数据的时候，会进行磁盘io一条一条数据进行比对,磁盘io速度缓慢,在数据库数据量庞大的时候查询速度会极其缓慢。为了减少磁盘IO,这时候引入索引这个数据结构</p><blockquote><p>聚集索引与非聚集索引</p></blockquote><ul><li><p><mark>聚集索引</mark>：聚集索引就是索引结构和数据库数据的数据分别在同一个文件中,数据全部保存在叶子节点下面</p></li><li><p><mark>非聚集索引</mark>：和聚集索引定义相反,树结构的叶子节点保存的是该数据的磁盘位置</p></li></ul><blockquote><p>红黑树</p></blockquote><p>Mysql数据库中INNODB引擎中默认使用的索引结构是红黑树,所谓红黑树就是二叉树的变种.</p><p>为什么mysql采用红黑树的结构而不是用二叉树呢？</p><p>答：</p><ol><li><p>红黑树相较于二叉树它的非叶子节点不会储存数据</p></li><li><p>红黑树的叶子结点有指针相互引用,在范围搜索的情况下，会提升效率</p></li></ol><p><mark>特点</mark>：数据从左到右递增</p><p>结构如下：</p><p><img src="file:///C:/Users/WS/AppData/Roaming/marktext/images/2022-06-30-17-08-33-image.png" title="" alt="" width="298"><img src="file:///C:/Users/WS/AppData/Roaming/marktext/images/2022-06-30-17-09-04-image.png" title="" alt="" width="334"></p><blockquote><p>红黑树为何能提升效率</p></blockquote><p>搜索数据的时候,首先会先加载第一行的数据进入RAM（内存）中,匹配找到条件的大体位置,往下搜索,重复如上操作。由图可知,例如我们查找主键20的数据,只需要查询三次即可搜索到数据,相较于mysql的全表扫描效率提升极大。</p><blockquote><p>索引覆盖</p></blockquote><p>所谓的索引覆盖就是查询的数据在索引树中可以直接获取到，而不用回表到主键索引聚集表中查询</p><blockquote><p>回表</p></blockquote><p>在索引树中找不到需要的数据,返回到主键索引树中搜索</p><blockquote><p>索引下推</p></blockquote><p>在MYSQL5.6之前，select  * from a  where username like   “a%”  and age &#x3D; 23  在联合索引结构中进行条件搜索时，不会对索引查询的字段(age&#x3D;23)进行判断,会进行回表，在主键索引中进行条件过滤。5.6之后增加了索引下推这个概念,会先根据条件进行过滤</p><blockquote><p>联合索引</p></blockquote><p>MYSQL进行联合索引的创建时,会生成一个非聚集索引结构,默认只能有一个聚集索引即主键索引树。</p><p>例如：username , phone ,age 三个字段为一个联合索引.会先依照username进行排序,如果相等在依照phone进行排序如果相同最后才会以age进行排序.叶子节点储存着对应的id,以便进行回表查询</p><p><img src="C:\Users\WS\AppData\Roaming\marktext\images\2022-06-30-17-38-52-image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
